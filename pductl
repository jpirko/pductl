#!/usr/bin/env python

"""
Ultra dummy script to control various PDUs using cmdline tools

Copyright (c) 2017 Jiri Pirko <jiri@resnulli.us>
Licensed under the GNU General Public License, version 2 as
published by the Free Software Foundation; see LICENSE for details.
"""

__author__ = """
jiri@resnulli.us (Jiri Pirko)
"""

import sys
import os
import subprocess
from configparser import ConfigParser

config = ConfigParser()
config.read(os.path.expanduser("~/.pductl"))

conf_hosts = list(config.sections())

def power_on(config, host):
    cmd = config.get(host, "power_on")
    sys.exit(subprocess.call(cmd, shell=True, stdout=subprocess.PIPE))

def power_off(config, host):
    cmd = config.get(host, "power_off")
    sys.exit(subprocess.call(cmd, shell=True, stdout=subprocess.PIPE))

def power_status(config, host):
    cmd = config.get(host, "power_status")
    ret = subprocess.call(cmd, shell=True, stdout=subprocess.PIPE)
    return "off" if ret else "on"

try:
    host = sys.argv[1]
except IndexError:
    for host in conf_hosts:
        print "%s %s" % (host, power_status(config, host))
    sys.exit(0)

try:
    action = sys.argv[2]
except IndexError:
    action = "status"

if not host in conf_hosts:
    print >> sys.stderr, "Unknown host \"%s\"" % host 
    sys.exit(1)

if action == "on":
    power_on(config, host)
elif action == "off":
    power_off(config, host)
elif action == "status":
    status = power_status(config, host)
    print status
    sys.exit(0 if status == "on" else 1)
else:
    print >> sys.stderr, "Unknown action \"%s\"" % action 
    sys.exit(1)
